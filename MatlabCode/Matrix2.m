A = [1, 2; 3, 4; 5, 6];
B = [7, 8; 9, 10; 11, 12];
C = 3 * ones(2,2)
A + B
A - B
A + 1                                   % A的每一个元素都加1
A * C                                   % 矩阵加减乘（包括数乘）符号与cpp一致（注意矩阵相乘必须满足行列相等）
A .* B                                  % 点乘，返回两个矩阵某行某列上的元素相乘的结果
B ./ A                                  % 点除，返回两个矩阵某行某列上的元素相乘的结果
log (A)                                 % 此处log相当于ln(另有log10)
exp (A)                                 % exp(j)即e^j
abs (A)                                 % 将A中每个数求绝对值
A'                                      % 求A的转置
D = [3, 6, 5, 10, 7];
[val, pos] = max(D);                    % max(D)得到D的最大值和最大值对应的下标（在这条语句val储存值，pos存储下标）（min同理）
val
pos
E = [1, 9; 2, 8; 3, 7]
[val, pos] = max(E);                    % 但若不是向量，则会返回每一列的最大值以及其在该列中的位置
val
pos
A < 4                                   % 将A中的每一个元素做布尔运算返回相应布尔值
[col, row] = find (A < 4)               % 得到A中小于4的元素的位置（col存储列，row存储行）
sum (D)
sum (A)                                 % 返回一个向量的和，若是一个矩阵，则返回每一个列向量的和
sum (A,2)                               % 第二个参数默认值为1，若参数值为2，则返回矩阵每一个行向量的和
prod (D)
prod (A)                                % 返回一个向量的积，若是一个矩阵，则返回每一个列向量的积
prod (A,2)                              % 第二个参数默认值为1，若参数值为2，则返回矩阵每一个行向量的积
E = E + 0.5;
D = D + 0.5;
ceil (D)
floor (E)                               % 对每一个元素取ceil或floor
F = magic (4)                               % 返回一个方阵，其每一行每一列每一对角线的和均相等
max (A,[],1)                            % 得到每一列的最大值并返回
max (A,[],2)                            % 得到每一行的最大值并返回
A(:)                                    % 将A转化成一个向量
max (A(:))                              % 得到A真实的最大值
flipud (eye(4))                         % 反方向的单位阵
sum (sum(F.*eye(4)))                    
sum (sum(F.*flipud(eye(4))))            % 这两条语句可以用于求对角线的值
G = [2,4;
    6,8];
H = pinv(G)                             % 得到矩阵的逆
G * H
G (2,1) = 4;
H = pinv(G);                            
G * H                                   % 若矩阵不可逆，相乘结果不为单位阵